{
  "components": {
    "schemas": {
      "alertevent": {
        "description": "Represents an alert event raised by a policy.",
        "properties": {
          "alertDefinition": {
            "description": "The name of the alert definition that triggered the alert event.",
            "example": "warning-notification",
            "type": "string"
          },
          "alertDefinitionNamespace": {
            "description": "The namespace of the alert definition.",
            "type": "string"
          },
          "principal": {
            "$ref": "#/components/schemas/principal"
          },
          "provider": {
            "description": "The provider used that the alert came from.",
            "type": "string"
          },
          "timestamp": {
            "description": "When the alert event was raised.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "alertDefinition",
          "principal"
        ],
        "type": "object"
      },
      "analyzer": {
        "description": "Represents an analyzer.",
        "properties": {
          "ID": {
            "description": "ID is the identifier of the object.",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The description of the analyzer.",
            "type": "string"
          },
          "detectors": {
            "description": "The detectors the analyzer can use.",
            "items": {
              "$ref": "#/components/schemas/detector"
            },
            "type": "array"
          },
          "enabled": {
            "description": "Tell if the analyzer is enabled by default.",
            "type": "boolean"
          },
          "group": {
            "description": "The group the analyzer belongs to.",
            "type": "string"
          },
          "models": {
            "description": "The models used by the analyzer.",
            "items": {
              "$ref": "#/components/schemas/analyzermodel"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the analyzer.",
            "type": "string"
          },
          "namespace": {
            "description": "The namespace of the object.",
            "readOnly": true,
            "type": "string"
          },
          "triggers": {
            "description": "A list of trigger or globl pattern that the analyzer will react on.\nA trigger is the detector Group and Name separated with a /.",
            "example": [
              "Code/*"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "analyzermodel": {
        "description": "Represent an analyzer model.",
        "properties": {
          "name": {
            "description": "The name of the model.",
            "type": "string"
          },
          "revision": {
            "description": "The revision of the model.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "detector": {
        "description": "Represent a detector an analyzer can use.",
        "properties": {
          "description": {
            "description": "The description of the detection.",
            "type": "string"
          },
          "group": {
            "description": "The group the detection belongs to.",
            "type": "string"
          },
          "label": {
            "description": "The label returned by the model.",
            "type": "string"
          },
          "name": {
            "description": "The name of the detection.",
            "type": "string"
          },
          "positional": {
            "description": "Tell if the detection is positional.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "elementalerror": {
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer"
          },
          "data": {
            "description": "Additional error data",
            "type": "object"
          },
          "description": {
            "description": "Error description",
            "type": "string"
          },
          "subject": {
            "description": "Error subject",
            "type": "string"
          },
          "title": {
            "description": "Error title",
            "type": "string"
          },
          "trace": {
            "description": "Error trace",
            "type": "string"
          }
        },
        "type": "object"
      },
      "extraction": {
        "description": "Represents the extracted information to log.",
        "properties": {
          "PIIs": {
            "description": "The PIIs found during classification.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "type": "object"
          },
          "annotations": {
            "description": "Annotations attached to the extraction.",
            "items": {
              "type": "string"
            },
            "type": "object"
          },
          "categories": {
            "description": "The categories are remapping of the modalities in a more human friendly way.",
            "items": {
              "$ref": "#/components/schemas/modality"
            },
            "type": "array"
          },
          "confidentiality": {
            "description": "The level of general confidentiality of the input.",
            "example": 0.9,
            "type": "number"
          },
          "data": {
            "description": "The data extracted.",
            "type": "string",
            "format": "byte"
          },
          "detections": {
            "description": "The detections found while applying policies.",
            "items": {
              "$ref": "#/components/schemas/textualdetection"
            },
            "type": "array"
          },
          "exploits": {
            "description": "The various exploits attempts.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "type": "object"
          },
          "hash": {
            "description": "The hash of the extraction.",
            "type": "string"
          },
          "intent": {
            "description": "The estimated intent embodied into the text.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "type": "object"
          },
          "internal": {
            "description": "If true, this extraction is for internal use only. This can be used by agentic\nsystems to mark an extraction as internal only as opposed to user facing.",
            "type": "boolean"
          },
          "keywords": {
            "description": "The keywords found during classification.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "type": "object"
          },
          "label": {
            "description": "A means of distinguishing what was extracted, such as prompt, input file or\ncode.",
            "type": "string"
          },
          "languages": {
            "description": "The language of the classification.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "type": "object"
          },
          "modalities": {
            "description": "The modalities of data detected in the data.",
            "items": {
              "$ref": "#/components/schemas/modality"
            },
            "type": "array"
          },
          "redactions": {
            "description": "The redactions that has been performed.",
            "items": {
              "$ref": "#/components/schemas/textualdetection"
            },
            "type": "array"
          },
          "relevance": {
            "description": "The level of general organization relevance of the input.",
            "example": 0.9,
            "type": "number"
          },
          "secrets": {
            "description": "The secrets found during classification.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "type": "object"
          },
          "topics": {
            "description": "The topic of the classification.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "extractionrequest": {
        "description": "Represents the extraction that the user wants to extract.",
        "properties": {
          "annotations": {
            "description": "Annotations attached to the extraction.",
            "items": {
              "type": "string"
            },
            "type": "object"
          },
          "data": {
            "description": "The binary data to request extraction for.",
            "type": "string"
          },
          "internal": {
            "description": "If true, this extraction is for internal use only. This can be used by agentic\nsystems to mark an extraction as internal only as opposed to user facing.",
            "type": "boolean"
          },
          "label": {
            "description": "A means of distinguishing what was extracted, such as prompt, input file or\ncode.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "latency": {
        "description": "Holds information about latencies introduced by Apex.",
        "properties": {
          "accessPolicy": {
            "description": "How much time it took to run the access policy in nanoseconds.",
            "type": "integer"
          },
          "analysis": {
            "description": "How much time it took to run content analysis in nanoseconds.",
            "type": "integer"
          },
          "assignPolicy": {
            "description": "How much time it took to run the assign policy in nanoseconds.",
            "type": "integer"
          },
          "contentPolicy": {
            "description": "How much time it took to run content policy in nanoseconds.",
            "type": "integer"
          },
          "extraction": {
            "description": "How much time it took to run input or output extraction in nanoseconds.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "modality": {
        "description": "Represents the modality of a some data.",
        "properties": {
          "group": {
            "description": "The group of data.",
            "example": "image",
            "type": "string"
          },
          "type": {
            "description": "The type of data.",
            "example": "png",
            "type": "string"
          }
        },
        "required": [
          "group",
          "type"
        ],
        "type": "object"
      },
      "principal": {
        "description": "Describe the principal.",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/principalapp"
          },
          "authType": {
            "description": "The type of authentication.",
            "enum": [
              "Certificate",
              "UserToken",
              "AppToken",
              "Hostname",
              "Token",
              "TierToken",
              "External"
            ]
          },
          "claims": {
            "description": "List of claims extracted from the user query.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "team": {
            "description": "The team that was used to authorize the request.",
            "example": "admins",
            "type": "string"
          },
          "tokenName": {
            "description": "The name of the token, if any.",
            "example": "my-user-token",
            "type": "string"
          },
          "type": {
            "description": "The type of principal.",
            "enum": [
              "User",
              "App"
            ],
            "example": [
              "User"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/principaluser"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "principalapp": {
        "description": "Describes the principal information of an application.",
        "properties": {
          "labels": {
            "description": "The list of labels attached to an application request.",
            "example": [
              "country=us",
              "another-label"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the application.",
            "example": "MyApp",
            "type": "string"
          },
          "tier": {
            "description": "The tier of the application request.",
            "example": "frontend",
            "type": "string"
          }
        },
        "type": "object"
      },
      "principaluser": {
        "description": "Describes the principal information of a user.",
        "properties": {
          "name": {
            "description": "Identification bit that will be used to identify the origin of the request.",
            "example": "user@company.com",
            "type": "string"
          }
        },
        "type": "object"
      },
      "scanexternaluser": {
        "description": "ScanExternalUser holds the information about the remote user for a ScanRequest.",
        "properties": {
          "claims": {
            "description": "List of claims extracted from the user query.",
            "example": [
              "@org=acuvity.ai",
              "given_name=John",
              "family_name=Doe"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the external user.",
            "example": "Alice",
            "type": "string"
          }
        },
        "required": [
          "claims",
          "name"
        ],
        "type": "object"
      },
      "scanrequest": {
        "description": "This is a scan request.",
        "properties": {
          "accessPolicy": {
            "description": "AccessPolicy allows to pass optional Rego access policy. If not set,\nThe action is always Allow,\nIf it is set, it will be run, and the final decision will be computed based\non that policy.\nIf the rego code does not start with package main, then the needed\nclassic package definition and  acuvity imports will be added\nautomatically.\nIf the code starts with package main, then everything remains untouched.",
            "type": "string"
          },
          "analyzers": {
            "description": "The name of the analyzers to run by the pipelines. If empty, it means all of\nthem. Possible values are PIIs, Secrets, Topics, Confidentiality, Exploits.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "annotations": {
            "description": "Annotations attached to the extraction.",
            "items": {
              "type": "string"
            },
            "type": "object"
          },
          "anonymization": {
            "default": "FixedSize",
            "description": "How to anonymize the data. If deanonymize is true, then VariablSize is required.",
            "enum": [
              "FixedSize",
              "VariableSize"
            ]
          },
          "bypassHash": {
            "description": "In the case of a contentPolicy that asks for a confirmation, this is the\nhash you must send back to bypass the block. This is only useful when a\ncontent policy has been set.",
            "example": "Alice",
            "type": "string"
          },
          "contentPolicy": {
            "description": "ContentPolicy allows to pass optional Rego content policy. If not set,\nThe action is always Allow, and there cannot be any alerts raised etc\nIf it is set, it will be run, and the final decision will be computed based\non that policy.\nIf the rego code does not start with package main, then the needed\nclassic package definition and  acuvity imports will be added\nautomatically.\nIf the code starts with package main, then everything remains untouched.",
            "type": "string"
          },
          "extractions": {
            "description": "The extractions to request.",
            "items": {
              "$ref": "#/components/schemas/extractionrequest"
            },
            "type": "array"
          },
          "keywords": {
            "description": "The keywords found during classification.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "messages": {
            "description": "Messages to process and provide detections for. Use data in extractions for\nprocessing binary data.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "minimalLogging": {
            "description": "If true, the system will not log the contents that were scanned.",
            "type": "boolean"
          },
          "redactions": {
            "description": "The redactions that has been performed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "The type of text.",
            "enum": [
              "Input",
              "Output"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/scanexternaluser"
          }
        },
        "type": "object"
      },
      "scanresponse": {
        "description": "This is a scan response.",
        "properties": {
          "ID": {
            "description": "ID is the identifier of the object.",
            "readOnly": true,
            "type": "string"
          },
          "alerts": {
            "description": "List of alerts that got raised during the policy resolution.",
            "items": {
              "$ref": "#/components/schemas/alertevent"
            },
            "type": "array"
          },
          "annotations": {
            "description": "Annotations attached to the log.",
            "items": {
              "type": "string"
            },
            "type": "object"
          },
          "decision": {
            "description": "Tell what was the decision about the data.",
            "enum": [
              "Deny",
              "Allow",
              "Ask",
              "Bypassed",
              "ForbiddenUser"
            ]
          },
          "extractions": {
            "description": "The extractions to log.",
            "items": {
              "$ref": "#/components/schemas/extraction"
            },
            "type": "array"
          },
          "hash": {
            "description": "The hash of the input.",
            "type": "string"
          },
          "latency": {
            "$ref": "#/components/schemas/latency"
          },
          "namespace": {
            "description": "The namespace of the object.",
            "readOnly": true,
            "type": "string"
          },
          "pipelineName": {
            "description": "The name of the particular pipeline that extracted the text.",
            "type": "string"
          },
          "principal": {
            "$ref": "#/components/schemas/principal"
          },
          "provider": {
            "description": "the provider to use.",
            "example": "openai",
            "type": "string"
          },
          "reasons": {
            "description": "The various reasons returned by the policy engine.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "time": {
            "description": "Set the time of the message request.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The type of text.",
            "enum": [
              "Input",
              "Output"
            ]
          }
        },
        "required": [
          "principal"
        ],
        "type": "object"
      },
      "textualdetection": {
        "description": "Represents a textual detection done by policy.",
        "properties": {
          "end": {
            "description": "The end position of the detection.",
            "type": "integer"
          },
          "key": {
            "description": "The key that is used in the name's place, If empty, a sequence of X's are used.",
            "type": "string"
          },
          "name": {
            "description": "The name of the detection.",
            "type": "string"
          },
          "score": {
            "description": "The confidence score of the detection.",
            "type": "number"
          },
          "start": {
            "description": "The start position of the detection.",
            "type": "integer"
          },
          "type": {
            "description": "The type of detection.",
            "enum": [
              "Keyword",
              "PII",
              "Secret"
            ]
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "info@acuvity.ai",
      "name": "Acuvity Team",
      "url": "https://acuvity.ai/"
    },
    "description": "Acuvity Apex provides access to scan and detection APIs",
    "title": "toplevel",
    "version": "1.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/_acuvity/analyzers": {
      "get": {
        "description": "List of all available analyzers.",
        "operationId": "get-all-Analyzers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/analyzer"
                  },
                  "type": "array"
                }
              }
            },
            "description": "n/a"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elementalerror"
                }
              }
            },
            "description": "Unable to determine response decoding."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elementalerror"
                }
              }
            },
            "description": "The caller is not authenticated."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elementalerror"
                }
              }
            },
            "description": "Unable to retrieve list of analyzers."
          }
        },
        "tags": [
          "apex"
        ]
      }
    },
    "/_acuvity/scan": {
      "post": {
        "description": "Processes the scan request.",
        "operationId": "create-ScanRequest-as-ScanResponse",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/scanrequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scanresponse"
                }
              }
            },
            "description": "Successfully processing a scan request returns a scan response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elementalerror"
                }
              }
            },
            "description": "The scan request could not be decoded."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elementalerror"
                }
              }
            },
            "description": "The caller is not authenticated."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elementalerror"
                }
              }
            },
            "description": "The caller is not authorized."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elementalerror"
                }
              }
            },
            "description": "Sending an invalid scan request returns an unprocessable entity error. Your models might be outdated."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elementalerror"
                }
              }
            },
            "description": "Processing the scan request failed because policies could not be assigned or running the analysis failed internally."
          }
        },
        "tags": [
          "apex"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://65a70e71881a8d000198b3f7.acuvity.dev"
    }
  ],
  "tags": [
    {
      "description": "Apex is the proxy and detectiono API service of Acuvity.",
      "name": "apex"
    }
  ]
}